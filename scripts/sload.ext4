#!/bin/sh

set -e

name="$(basename "$0")"

die(){
  cat <<EOF
Usage: $name  [options]  -f directory  device
[options]:
  -t mount point [prefix of target fs path, default:/]
  -P preserve owner: user and group
EOF
  exit 1
}

has_source=0
has_prefix=0
has_dev=0
preserve_perms=0

while [ "$#" != 0 ]
do
  arg="$1"; shift
  case "$arg" in
    -f) source="$1"; shift; has_source=1; ;;
    -t) prefix="$1"; shift; has_prefix=1; ;;
    -P) preserve_perms=1; ;;
     *) [ "$has_dev" = 0 ] || die; dev="$arg"; has_dev=1; ;;
  esac
done

[ "$has_source" = 1 ] || die
[ "$has_dev" = 1 ] || die

# Tar doesn't have an option to just prefix paths. Escape for use in sed and pray that there's nothing missing
eprefix="$(printf "%s\n" "$prefix" | sed 's|/\+|/|g;s|/$||g;s/[\/\\]/\\\0/g')"

TOPTS="--create --preserve-permissions --force-local"

if [ "$preserve_perms" = 0 ]
  then TOPTS="$TOPTS --owner=root:0 --group=root:0"
fi

set -u

# The ./././. is a hack. It's an attempt to prevent the transform regex to affect symlink targets :(
tar $TOPTS --directory="$source" --transform="s/^\.\/\.\/\.\/\.\//$eprefix\//" ./././. | tar2ext "$dev"
